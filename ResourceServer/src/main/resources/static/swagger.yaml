openapi: "3.0.3"
info:
  title: "Twister Resource Server API"
  version: "0.0.1"
servers:
  - url: "{scheme}://{domain}:{port}/{context}"
    description: Resource server
    variables:
      scheme:
        enum:
          - 'http'
          - 'https'
        default: 'https'
      context:
        enum:
          - ''
          - 'server'
        default: 'server'
      domain:
        enum:
          - 'localhost'
          - 'twister.fvds.ru'
        default: twister.fvds.ru
      port:
        enum:
          - '9080'
          - '8443'
          - '9443'
        default: '9443'
components:
  securitySchemes:
    oAuthSample:
      type: oauth2
      description: API использует [OAuth2 authorizationCode](https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow).
      flows:
        authorizationCode:
          tokenUrl: https://twister.fvds.ru:8443/realms/twister/protocol/openid-connect/token
          authorizationUrl: https://twister.fvds.ru:8443/realms/twister/protocol/openid-connect/auth
          scopes: { }
  #            write: записать значение
  #            read: прочитать значение


  schemas:
    MoneyTypePartialResponseDto:
      type: "object"
      required:
        - name
        - path_to_icon
      properties:
        name:
          description: "Имя типа по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        path_to_icon:
          description: "Путь до иконки"
          maxLength: 64
          minLength: 1
          type: "string"
          example: "icon"
    MoneyTypeCreateRequestDto:
      type: "object"
      required:
        - path_to_icon
      properties:
        path_to_icon:
          description: "Путь до иконки"
          maxLength: 64
          minLength: 1
          type: "string"
          example: "icon"
    ItemMoneyPartialResponseDto:
       required:
          - cost
          - name
          - type
          - visible_name
       type: object
       properties:
         name:
           description: "Имя предмета по которому его можно однозначно идентифицировать"
           type: "string"
           maxLength: 64
           example: "name"
           minLength: 1
         visible_name:
           description: "Имя видимое пользователям"
           type: "string"
           example: "name"
           maxLength: 64
           minLength: 1
         type:
           description: "Тип предмета"
           type: "string"
           enum:
            - "MONEY"
         cost:
           $ref: "#/components/schemas/MoneyPartialResponseDto"
    ItemTrashPartialResponseDto:
        required:
          - name
          - type
          - visible_name
        type: object
        properties:
          name:
            description: "Имя предмета по которому его можно однозначно идентифицировать"
            type: "string"
            example: "name"
            maxLength: 64
            minLength: 1
          visible_name:
            description: "Имя видимое пользователям"
            type: "string"
            example: "name"
            maxLength: 64
            minLength: 1
          type:
            description: "Тип предмета"
            type: "string"
            enum:
              - "TRASH"
    MoneyPartialResponseDto:
      type: "object"
      required:
        - value
        - type
      properties:
        type:
          $ref: "#/components/schemas/MoneyTypePartialResponseDto"
        value:
          description: "Количество денег"
          minimum: 0
          example: 0
          type: number
    ItemMoneyCreateRequestDto:
      type: "object"
      required:
        - visible_name
        - type
        - cost
      properties:
        type:
          description: "Тип предмета"
          type: "string"
          enum:
            - "MONEY"
        visible_name:
          description: "Имя видимое пользователям"
          type: "string"
          example: "name"
          maxLength: 64
          minLength: 1
        cost:
          $ref: "#/components/schemas/MoneyCreateRequestDto"
    ItemTrashCreateRequestDto:
      type: "object"
      required:
        - type
        - visible_name
      properties:
        type:
          description: "Тип предмета"
          type: "string"
          enum:
            - "TRASH"
        visible_name:
          description: "Имя видимое пользователям"
          type: "string"
          example: "name"
          maxLength: 64
          minLength: 1
    MoneyCreateRequestDto:
      type: "object"
      required:
        - type
        - value
      properties:
        type:
          $ref: "#/components/schemas/MoneyTypeNameRequestDto"
        value:
          description: "Количество денег"
          minimum: 0
          example: 0
          type: number
    MoneyTypeNameRequestDto:
      type: "object"
      required:
        - name
      properties:
        name:
          description: "Имя типа по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    ItemPartialResponseDto:
      oneOf:
        - $ref: "#/components/schemas/ItemMoneyPartialResponseDto"
        - $ref: "#/components/schemas/ItemTrashPartialResponseDto"
      discriminator:
        propertyName: type
        mapping:
          MONEY: "#/components/schemas/ItemMoneyPartialResponseDto"
          TRASH: "#/components/schemas/ItemTrashPartialResponseDto"
    ItemCreateRequestDto:
      discriminator:
        propertyName: type
        mapping:
          MONEY: "#/components/schemas/ItemMoneyCreateRequestDto"
          TRASH: "#/components/schemas/ItemTrashCreateRequestDto"
      oneOf:
        - $ref: "#/components/schemas/ItemMoneyCreateRequestDto"
        - $ref: "#/components/schemas/ItemTrashCreateRequestDto"
    ItemNameRequestDto:
      type: "object"
      required:
        - name
      properties:
        name:
          description: "Имя предмета по которому его можно однозначно идентифицировать"
          type: "string"
          example: "name"
          maxLength: 64
          minLength: 1
    CaseSlotCreateRequestDto:
      type: "object"
      required:
        - win_rate
        - item
        - quantity
      properties:
        win_rate:
          description: "Шанс выпадения предмета"
          minimum: 0
          maximum: 100
          example: 100
          type: number
        item:
          $ref: "#/components/schemas/ItemNameRequestDto"
        quantity:
          description: "Количество предметов в слоте"
          minimum: 0
          example: 1
          type: "integer"
          format: "int32"
    CasePartialResponseDto:
      type: "object"
      required:
        - price
        - cooldown
        - name
        - visible_name
        - description
      properties:
        price:
          $ref: "#/components/schemas/MoneyPartialResponseDto"
        cooldown:
          type: string
          format: duration
          description: "Кулдаун с последней прокрутки пользователя"
          example: 1
        name:
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        visible_name:
          description: "Имя видимое пользователю"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        description:
          description: "Описание кейса"
          type: "string"
          maxLength: 1000
          minLength: 0
          example: ""
    CaseCreateRequestDto:
      type: "object"
      required:
        - price
        - cooldown
        - visible_name
        - description
      properties:
        items:
          description: "**В сумме `win_rate` должен быть `100`**"
          type: "array"
          items:
            $ref: "#/components/schemas/CaseSlotCreateRequestDto"
        price:
          $ref: "#/components/schemas/MoneyCreateRequestDto"
        cooldown:
          type: string
          format: duration
          description: "Кулдаун с последней прокрутки пользователя"
          example: 1
        visible_name:
          description: "Имя видимое пользователю"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        description:
          description: "Описание кейса"
          type: "string"
          maxLength: 1000
          minLength: 0
          example: ""
    CaseSlotPartialResponseDto:
      type: "object"
      required:
        - win_rate
        - item
        - quantity
        - name
      properties:
        win_rate:
          description: "Шанс выпадения предмета"
          minimum: 0
          maximum: 100
          type: number
        item:
          $ref: "#/components/schemas/ItemPartialResponseDto"
        quantity:
          description: "Количество предметов в слоте"
          minimum: 0
          type: "integer"
          format: "int32"
        name:
          description: "Имя слота по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
    CaseItemsPartialResponseDto:
      type: "object"
      required:
        - price
        - cooldown
        - visible_name
        - description
        - name
        - items
      properties:
        items:
          description: "**В сумме `win_rate` должен быть `100`**"
          type: "array"
          items:
            $ref: "#/components/schemas/CaseSlotPartialResponseDto"
        price:
          $ref: "#/components/schemas/MoneyPartialResponseDto"
        cooldown:
          type: string
          format: duration
          description: "Кулдаун с последней прокрутки пользователя"
          example: 1
        name:
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
        visible_name:
          description: "Имя видимое пользователю"
          type: "string"
          maxLength: 64
          minLength: 1
        description:
          description: "Описание кейса"
          type: "string"
          maxLength: 1000
          minLength: 1
    CaseItemsWithoutCooldownPartialResponseDto:
      type: "object"
      required:
        - price
        - visible_name
        - description
        - name
        - items
      properties:
        items:
          description: "**В сумме `win_rate` должен быть `100`**"
          type: "array"
          items:
            $ref: "#/components/schemas/CaseSlotPartialResponseDto"
        price:
          $ref: "#/components/schemas/MoneyPartialResponseDto"
        name:
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
        visible_name:
          description: "Имя видимое пользователю"
          type: "string"
          maxLength: 64
          minLength: 1
        description:
          description: "Описание кейса"
          type: "string"
          maxLength: 1000
          minLength: 1
    CaseLightWithoutCooldownPartialResponseDto:
      type: "object"
      required:
        - price
        - visible_name
        - description
        - name
      properties:
        price:
          $ref: "#/components/schemas/MoneyPartialResponseDto"
        name:
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
        visible_name:
          description: "Имя видимое пользователю"
          type: "string"
          maxLength: 64
          minLength: 1
        description:
          description: "Описание кейса"
          type: "string"
          maxLength: 1000
          minLength: 1
    CaseWithoutCooldownPagePartialResponseDto:
      type: "object"
      required:
        - values
        - total_pages
        - page
      properties:
        values:
          type: "array"
          items:
            $ref: "#/components/schemas/CaseLightWithoutCooldownPartialResponseDto"
        total_pages:
          description: "Полное количество страниц кейсов"
          type: "integer"
          format: "int32"
          minimum: 0
          example: 1
        page:
          description: "Номер страницы из которой взята информация. Индексация начиная с нуля"
          type: "integer"
          format: "int32"
          minimum: 0
          example: 0
    CaseLightPartialResponseDto:
      type: "object"
      required:
        - price
        - cooldown
        - name
        - visible_name
        - description
      properties:
        price:
          $ref: "#/components/schemas/MoneyPartialResponseDto"
        cooldown:
          type: string
          format: duration
          description: "Кулдаун с последней прокрутки пользователя"
          example: 0
        name:
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        visible_name:
          description: "Имя видимое пользователю"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        description:
          description: "Описание кейса"
          type: "string"
          maxLength: 1000
          minLength: 0
          example: ""
    CasePagePartialResponseDto:
      type: "object"
      required:
        - values
        - total_pages
        - page
      properties:
        values:
          type: "array"
          items:
            $ref: "#/components/schemas/CaseLightPartialResponseDto"
        total_pages:
          description: "Полное количество страниц кейсов"
          type: "integer"
          format: "int32"
          minimum: 0
          example: 1
        page:
          description: "Номер страницы из которой взята информация. Индексация начиная с нуля"
          type: "integer"
          format: "int32"
          minimum: 0
          example: 0
    GeneralAccountCreateRequestDto:
      type: "object"
      required:
        - nickname
      properties:
        nickname:
          description: "Уникальный никнейм аккаунта видимый всем"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    GeneralAccountPartialResponseDto:
      type: "object"
      required:
        - nickname
        - name
      properties:
        nickname:
          description: "Уникальный никнейм аккаунта видимый всем"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        name:
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    GeneralAccountNameResponseDto:
      type: "object"
      required:
        - name
      properties:
        name:
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    GeneralAccountPublicResponseDto:
      type: "object"
      required:
        - nickname
        - name
      properties:
        nickname:
          description: "Уникальный никнейм аккаунта видимый всем"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
        name:
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    GeneralAccountNotRegisteredException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Аккаунт не зарегистрирован"
          type: "string"
          example: "General account not registered."
    InsufficientFundsException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Недостоточно денег на счету"
          type: "string"
          example: "Insufficient funds on the account."
    CooldownException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Кейс недоступен в данный момент"
          type: "string"
          example: "Cooldown."
    GeneralAccountExistsException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Аккаунт уже существует. В header Location адрес."
          type: "string"
          example: "General Account already exists."
    InvalidMoneyTypeException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Указан неправильный тип денег."
          type: "string"
          example: "Invalid type specified."
    InvalidItemTypeException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Указан неправильный тип предмета."
          type: "string"
          example: "Invalid type specified."
    NicknameUniqueException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Никнейм уже занят"
          type: "string"
          example: "The nickname already exists."
    NoSellingItemException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Предмет не для продажи"
          type: "string"
          example: "The item is not for sale."
    NotEnoughItemsException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Предмет недостаточно"
          type: "string"
          example: "Not enough items in inventory."
    UniqueException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Уже существует"
          type: "string"
          example: "Already exists."
    NotFoundException:
      type: "object"
      required:
        - message
      properties:
        message:
          description: "Не найден"
          type: "string"
          example: "Not found."
    AccountCreateRequestDto:
      type: "object"
      properties:
        type:
          $ref: "#/components/schemas/MoneyTypeNameRequestDto"
    AccountPartialResponseDto:
      type: "object"
      required:
        - number
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/MoneyPartialResponseDto"
        number:
          description: "Номер счета по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    SlotQuantityRequestDto:
      type: "object"
      required:
        - quantity
      properties:
        quantity:
          description: "Количество предметов в слоте"
          minimum: 0
          example: 1
          type: "integer"
          format: "int32"
    SlotPartialResponseDto:
      type: "object"
      required:
        - item
        - quantity
      properties:
        item:
          $ref: "#/components/schemas/ItemPartialResponseDto"
        quantity:
          description: "Количество предметов в слоте"
          minimum: 0
          example: 1
          type: "integer"
          format: "int32"
    InventoryPartialSlotsResponseDto:
      type: "object"
      required:
        - slots
        - name
      properties:
        slots:
          type: "array"
          items:
            $ref: "#/components/schemas/SlotPartialResponseDto"
        name:
          description: "Имя инвентаря по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    InventoryPartialResponseDto:
      type: "object"
      required:
        - name
      properties:
        name:
          description: "Имя инвентаря по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    InventoryNameResponseDto:
      type: "object"
      required:
        - name
      properties:
        name:
          description: "Имя инвентаря по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    CaseNameResponseDto:
      type: "object"
      required:
        - name
      properties:
        name:
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    AccountNumberResponseDto:
      type: "object"
      required:
        - number
      properties:
        number:
          description: "Номер счета по которому его можно однозначно идентифицировать"
          type: "string"
          maxLength: 64
          minLength: 1
          example: "name"
    TwistPartialResponseDto:
      type: "object"
      required:
        - selectCase
        - account
        - twistedOn
        - item
        - quantity
        - wonSlotName
        - number
      properties:
        selectCase:
          $ref: "#/components/schemas/CaseNameResponseDto"
        account:
          $ref: "#/components/schemas/AccountNumberResponseDto"
        twistedOn:
          type: string
          format: date-time
          example: 2018-03-20T09:12:28Z
        item:
          $ref: "#/components/schemas/ItemPartialResponseDto"
        quantity:
          description: "Количество предметов в слоте"
          minimum: 0
          example: 1
          type: "integer"
          format: "int32"
        wonSlotName:
          minLength: 1
          maxLength: 64
          example: "slot"
          type: "string"
        number:
          minLength: 1
          maxLength: 64
          example: "317"
          type: "string"
security:
  - oAuthSample:
      - write
      - read
paths:
  /api/public/money/type:
    get:
      tags:
        - public money type
      summary: "GET api/public/money/type"
      description: "Получить все существующие типы денег."
      operationId: "listMoneyTypes"
      security: [ ]
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MoneyTypePartialResponseDto"
  /api/public/money/type/{name}:
    get:
      tags:
        - public money type
      summary: "GET api/public/money/type/{name}"
      description: "Получить конкретный тип денег."
      security: [ ]
      operationId: "getMoneyType"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя типа по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/MoneyTypePartialResponseDto"
        "404":
          description: "Тип не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/public/item:
    get:
      tags:
        - public item
      summary: "GET api/public/item"
      operationId: "listItems"
      security: [ ]
      description: "Получить все существующие предметы"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemPartialResponseDto"
  /api/public/item/{name}:
    get:
      tags:
        - public item
      summary: "GET api/public/item/{name}"
      operationId: "get"
      security: [ ]
      description: "Получить конкретный предмет"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя предмета по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ItemPartialResponseDto"
        "404":
          description: "Тип не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/public/case:
    get:
      description: "Получить страницу кейсов"
      security: [ ]
      tags:
        - public case
      summary: "GET api/public/case"
      operationId: "listCase"
      parameters:
        - name: "page"
          in: "query"
          required: false
          description: "номер страницы"
          schema:
            type: "integer"
            format: "int32"
            minimum: 0
            example: 0
            default: 0
        - name: "size"
          in: "query"
          required: false
          description: "То сколько будет кейсов в каждой странице"
          schema:
            type: "integer"
            format: "int32"
            minimum: 1
            maximum: 50
            example: 5
            default: 5
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CaseWithoutCooldownPagePartialResponseDto"
  /api/public/case/{name}:
    get:
      description: "Получить информацию об конкретном кейсе"
      security: [ ]
      tags:
        - public case
      summary: "GET api/public/case/{name}"
      operationId: "info"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CaseItemsWithoutCooldownPartialResponseDto"
        "404":
          description: "Кейс не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}/actual_case:
    get:
      description: "Получить страницу кейсов с информацией о том сколько осталось времени, чтобы покрутить еще раз. Если прокрутки никогда не было, то `0`."
      tags:
        - actual case
      security:
        - oAuthSample:
            - read
      summary: "GET api/general/{name}/actual_case"
      operationId: "listCase"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "page"
          in: "query"
          required: false
          description: "номер страницы"
          schema:
            type: "integer"
            format: "int32"
            minimum: 0
            example: 0
            default: 0
        - name: "size"
          in: "query"
          required: false
          description: "То сколько будет кейсов в каждой странице"
          schema:
            type: "integer"
            format: "int32"
            minimum: 1
            maximum: 50
            example: 5
            default: 5
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CasePagePartialResponseDto"
        "404":
          description: "Аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}/actual_case/{case_name}:
    get:
      description: "Получить конкретный кейс с информацией о том сколько осталось времени, чтобы покрутить еще раз. Если прокрутки никогда не было, то `0`."
      tags:
        - actual case
      security:
        - oAuthSample:
            - read
      summary: "GET api/general/{name}/actual_case/{case_name}"
      operationId: "info"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "case_name"
          in: "path"
          required: true
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CaseItemsPartialResponseDto"
        "404":
          description: "Аккаунт или/и кейс не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"

  /api/public/general/{name}:
    get:
      tags:
        - public general
      security: [ ]
      description: "Получить публичные данные аккаунта"
      summary: "GET api/public/general/{name}"
      operationId: "infoPublic"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GeneralAccountPublicResponseDto"
        "404":
          description: "Аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/public/general/search:
    get:
      tags:
        - public general
      security: [ ]
      description: "Найти аккаунт"
      summary: "GET api/public/general/search"
      operationId: "search"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Никнейм аккаунта"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GeneralAccountPublicResponseDto"
        "404":
          description: "Аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}:
    put:
      tags:
        - general
      security:
        - oAuthSample:
            - write
            - read
      summary: "PUT api/general/{name}"
      description: "Поместить новый или существующий аккаунт"
      operationId: "put"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneralAccountCreateRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GeneralAccountPartialResponseDto"
        "409":
          description: "Ошибка регистрации"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NicknameUniqueException"
    get:
      tags:
        - general
      security:
        - oAuthSample:
            - read
      summary: "GET api/general/{name}"
      operationId: "info"
      description: "Поместить информацию об конкретном аккаунте"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GeneralAccountPartialResponseDto"
        "404":
          description: "Аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general:
    post:
      description: "Создать новый аккаунт"
      tags:
        - general
      security:
        - oAuthSample:
            - write
            - read
      summary: "POST api/general"
      operationId: "register"
      parameters:
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneralAccountCreateRequestDto"
        required: true
      responses:
        "201":
          headers:
            Location:
              description: "Ссылка на персональную страничку акканута"
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GeneralAccountPartialResponseDto"
        "409":
          description: "Ошибка регистрации"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/GeneralAccountExistsException"
                  - $ref: "#/components/schemas/NicknameUniqueException"
    get:
      description: "Получить имя своего аккаунта"
      tags:
        - general
      security:
        - oAuthSample:
            - read
      summary: "GET api/general"
      operationId: "name"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GeneralAccountNameResponseDto"
  /api/general/{name}/accounts/{sourceNumber}/transfer/{recipientNumber}:
    post:
      tags:
        - account
      security:
        - oAuthSample:
            - read
            - write
      summary: "POST api/general/{name}/accounts/{sourceNumber}/transfer/{recipientNumber}"
      description: "Перевести деньги с одного счета на другой"
      operationId: "transfer"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "sourceNumber"
          in: "path"
          required: true
          description: "Номер счета откуда будут переводиться деньги"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "recipientNumber"
          in: "path"
          required: true
          description: "Номер счета куда будут переводиться деньги"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoneyCreateRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
        "403":
          description: "Счет не принадлежит вам"
        "404":
          description: "Счет или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
        "409":
          description: "Денег на счету не достаточно"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InsufficientFundsException"
                  - $ref: "#/components/schemas/InvalidMoneyTypeException"
  /api/general/{name}/accounts/{number}:
    put:
      tags:
        - account
      security:
        - oAuthSample:
            - read
            - write
      description: "Поместить новый или существующий счет."
      summary: "PUT api/general/{name}/accounts/{number}"
      operationId: "register"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "number"
          in: "path"
          required: true
          description: "Номер счета по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountCreateRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AccountPartialResponseDto"
        "404":
          description: "Счет или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
    get:
      tags:
        - account
      security:
        - oAuthSample:
            - read
            - write
      summary: "GET api/general/{name}/accounts/{number}"
      operationId: "info"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "number"
          in: "path"
          required: true
          description: "Номер счета по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AccountPartialResponseDto"
        "404":
          description: "Счет или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}/accounts:
    post:
      tags:
        - account
      security:
        - oAuthSample:
            - read
            - write
      description: "Создать новый счет."
      summary: "POST api/general/{name}/accounts"
      operationId: "register_post"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountCreateRequestDto"
        required: true
      responses:
        "201":
          headers:
            Location:
              description: "Ссылка на персональную страничку счета"
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AccountPartialResponseDto"
        "404":
          description: "Аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
    get:
      tags:
        - account
      security:
        - oAuthSample:
            - read
      description: "Получить все счета на аккаунте"
      summary: "GET api/general/{name}/accounts"
      operationId: "listAccounts"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AccountPartialResponseDto"
        "404":
          description: "Аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}/inventory/{name_inventory}/{item}/sell/{account_number}:
    post:
      tags:
        - inventory
      security:
        - oAuthSample:
            - read
            - write
      description: "Продать предметы в инвентаре"
      summary: "POST api/general/{name}/inventory/{name_inventory}/{item}/sell/{accountNumber}"
      operationId: "sell"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "name_inventory"
          in: "path"
          required: true
          description: "Имя инвентаря по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "item"
          in: "path"
          required: true
          description: "Имя предмета который есть в инвентаре"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "account_number"
          in: "path"
          required: true
          description: "Счет куда положить деньги после продажи"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SlotQuantityRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
        "403":
          description: "Инвентарь не принадлежит вам"
        "404":
          description: "Инвентарь, предмет, счет или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
        "409":
          description: "Предметов в инвентаре не достаточно"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NoSellingItemException"
                  - $ref: "#/components/schemas/NotEnoughItemsException"
                  - $ref: "#/components/schemas/InvalidMoneyTypeException"
  /api/general/{name}/inventory:
    post:
      tags:
        - inventory
      security:
        - oAuthSample:
            - read
            - write
      description: "Создать новый инвентарь"
      summary: "POST api/general/{name}/inventory"
      operationId: "register"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "201":
          headers:
            Location:
              description: "Ссылка на персональную страничку инвентаря"
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/InventoryPartialResponseDto"
    get:
      tags:
        - inventory
      security:
        - oAuthSample:
            - read
            - write
      description: "Получить список инвентарей"
      summary: "GET api/general/{name}/inventory"
      operationId: "names"
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "object"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/InventoryNameResponseDto"
  /api/general/{name}/inventory/{name_inventory}:
    get:
      tags:
        - inventory
      security:
        - oAuthSample:
            - read
      description: "Получить информацию об инвентаре"
      summary: "GET api/general/{name}/inventory/{name_inventory}"
      operationId: "info"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "name_inventory"
          in: "path"
          required: true
          description: "Имя инвентаря по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/InventoryPartialSlotsResponseDto"
        "404":
          description: "Инвентарь или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}/inventory/{name_inventory}/{item}:
    get:
      tags:
        - inventory
      security:
        - oAuthSample:
            - read
      description: "Получить информацию об слоте в инвентаре"
      summary: "GET api/general/{name}/inventory/{name_inventory}/{item}"
      operationId: "infoSlot"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "name_inventory"
          in: "path"
          required: true
          description: "Имя инвентаря по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "item"
          in: "path"
          required: true
          description: "Предмет в инвентаре"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/SlotPartialResponseDto"
        "404":
          description: "Инвентарь, предмет или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/general/{name}/accounts/{number}/twist/{name_inventory}/{case_name}:
    post:
      tags:
        - twist
      security:
        - oAuthSample:
            - read
            - write
      description: "Сделать прокрутку кейса"
      summary: "POST api/general/{name}/accounts/{number}/twist/{name_inventory}/{caseName}"
      operationId: "twist"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя аккаунта по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "name_inventory"
          in: "path"
          required: true
          description: "Инвентарь куда складывать выйгрыш"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "number"
          in: "path"
          required: true
          description: "Номер счета с которого спишутся деньги на прокрутку"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "case_name"
          in: "path"
          required: true
          description: "Кейс который крутить"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TwistPartialResponseDto"
        "403":
          description: "Счет вам не принадлежит"
        "404":
          description: "Инвентарь, счет, кейс или/и аккаунт не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
        "409":
          description: "Неудачная прокрутка"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/InsufficientFundsException"
                  - $ref: "#/components/schemas/InvalidMoneyTypeException"
                  - $ref: "#/components/schemas/CooldownException"

  /api/money/type:
    get:
      tags:
        - money type
      summary: "GET api/money/type"
      description: "Получить все существующие типы денег.<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "listMoneyTypes"
      security:
        - oAuthSample:
            - read
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/MoneyTypePartialResponseDto"
        "403":
          description: "У вас нет роли `ADMIN`."
  /api/money/type/{name}:
    put:
      tags:
        - money type
      summary: "PUT api/money/type/{name}"
      description: "Поместить новый или существующий тип денег.<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "putMoneyType"
      security:
        - oAuthSample:
            - read
            - write
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя типа по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoneyTypeCreateRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/MoneyTypePartialResponseDto"
    get:
      tags:
        - money type
      summary: "GET api/money/type/{name}"
      description: "Получить конкретный тип денег.<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "getMoneyType"
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            description: "Имя типа по которому его можно однозначно идентифицировать"
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/MoneyTypePartialResponseDto"
        "404":
          description: "Тип не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
        "403":
          description: "У вас нет роли `ADMIN`."
  /api/item/{name}:
    get:
      tags:
        - item
      summary: "GET api/item/{name}"
      description: "Получить конкретный предмет<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "get"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя предмета по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ItemPartialResponseDto"
        "404":
          description: "Предмет не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
        "403":
          description: "У вас нет роли `ADMIN`."
    put:
      tags:
        - item
      summary: "PUT api/item/{name}"
      operationId: "put"
      description: "Поместить новый или существующий предмет.<br>**Это API доступно только для роли `ADMIN`**"
      security:
        - oAuthSample:
            - read
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            description: "Имя типа по которому его можно однозначно идентифицировать"
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemCreateRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ItemPartialResponseDto"
        "403":
          description: "У вас нет роли `ADMIN`."
        "404":
          description: "Тип денег не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
  /api/item:
    get:
      tags:
        - item
      summary: "GET api/item"
      description: "Получить все существующие предметы<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "listItems"
      security:
        - oAuthSample:
            - read
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ItemPartialResponseDto"
        "403":
          description: "У вас нет роли `ADMIN`."
  /api/case/{name}:
    put:
      tags:
        - case
      security:
        - oAuthSample:
            - read
            - write
      summary: "PUT api/case/{name}"
      description: "Поместить новый или существующий кейс.<br>На данный момент невозможно изменение слотов.<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "putCase"
      parameters:
        - name: "name"
          in: "path"
          required: true
          description: "Имя кейса по которому его можно однозначно идентифицировать"
          schema:
            type: "string"
            maxLength: 64
            minLength: 1
        - name: "content-type"
          in: "header"
          required: false
          schema:
            type: "string"
            enum:
              - "application/json"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CaseCreateRequestDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CasePartialResponseDto"
        "403":
          description: "У вас нет роли `ADMIN`."
        "404":
          description: "Предмет не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
    get:
      tags:
        - case
      security:
        - oAuthSample:
            - read
      summary: "GET api/case/{name}"
      description: "Получить полную информацию по конкретному кейсу<br>**Это API доступно только для роли `ADMIN`**"
      operationId: "info"
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            description: "Имя кейса по которому его можно однозначно идентифицировать"
            type: "string"
            maxLength: 64
            minLength: 1
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/CaseItemsPartialResponseDto"
        "404":
          description: "Тип не найден"
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotFoundException"
        "403":
          description: "У вас нет роли `ADMIN`."